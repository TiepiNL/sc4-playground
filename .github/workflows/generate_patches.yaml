name: Generate Blocker Patch Files

on:
  workflow_dispatch:
    inputs:
      data_source:
        description: 'Data Source'
        required: true
        default: 'SimCity_1.dat'
        type: choice
        options:
          - 'SimCity_1.dat'
          - 'custom'
      
      custom_file_id:
        description: 'Custom Google Drive File ID (only used when data_source = custom)'
        required: false
        type: string
      
      selection_mode:
        description: 'Zone/Wealth Selection Mode'
        required: true
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'specific'
      
      zone_wealth_combinations:
        description: 'Zone/Wealth Combinations (comma-separated, remove unwanted when using specific mode)'
        required: false
        type: string
        default: 'R$,R$$,R$$$,CO$$,CO$$$,CS$,CS$$,CS$$$,I-d,I-m,I-ht,I-r'
      
      enable_datpack:
        description: 'Create single datpacked file (combines all .dat files)'
        required: false
        default: false
        type: boolean

env:
  GDRIVE_FILE_ID: ${{ vars.GZ_FILE_ID }}
  CUSTOM_FILE_ID: ${{ github.event.inputs.custom_file_id }}
  DATA_SOURCE: ${{ github.event.inputs.data_source }}
  STARTING_INSTANCE_ID: ${{ vars.STARTING_INSTANCE_ID }}
  DAT_FILENAME: 'SimCity_1.dat'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v4
        with: { python-version: '3.x' }
      - run: pip install gdown
      - uses: actions/cache@v4
        id: cache-simcity-dat
        with:
          path: data/${{ env.DAT_FILENAME }}
          key: ${{ runner.os }}-simcity-dat-${{ env.DATA_SOURCE == 'custom' && env.CUSTOM_FILE_ID || env.GDRIVE_FILE_ID }}
      - if: steps.cache-simcity-dat.outputs.cache-hit != 'true'
        run: |
          # Determine which file ID to use based on data source selection
          if [ "${{ env.DATA_SOURCE }}" = "custom" ]; then
            FILE_ID="${{ env.CUSTOM_FILE_ID }}"
            echo "Using custom Google Drive file ID: $FILE_ID"
            echo "Downloading custom building pack archive..."
            gdown --id "$FILE_ID" --fuzzy -O "data/custom.zip"
          else
            FILE_ID="${{ env.GDRIVE_FILE_ID }}"
            echo "Using default SimCity_1.dat file ID: $FILE_ID"
            echo "Downloading SimCity_1.dat archive..."
            gdown --id "$FILE_ID" --fuzzy -O "data/SimCity_1.dat.zip"
            unzip "data/SimCity_1.dat.zip" -d data/
          fi
      
      - name: Extract and process data
        env:
          DATA_SOURCE: ${{ github.event.inputs.data_source }}
        run: |
          if [ "$DATA_SOURCE" = "custom" ]; then
            echo "Processing custom building packs..."
            python3 scripts/process_custom_dbpf.py
          else
            echo "Processing Maxis base game data from SimCity_1.dat..."
            python3 scripts/extract_maxis_lots.py data/SimCity_1.dat data/lot_configurations.json
          fi
      
      - name: Run script to create patch files from JSON
        env:
          SELECTION_MODE: ${{ github.event.inputs.selection_mode }}
          ZONE_WEALTH_COMBINATIONS: ${{ github.event.inputs.zone_wealth_combinations }}
          ENABLE_DATPACK: ${{ github.event.inputs.enable_datpack }}
        run: |
          # Build command arguments based on selection mode
          if [ "$SELECTION_MODE" = "specific" ]; then
            # Parse zone/wealth combinations from comma-separated input
            ARGS=""
            
            # Split comma-separated combinations and convert to filter arguments
            IFS=',' read -ra COMBINATIONS <<< "$ZONE_WEALTH_COMBINATIONS"
            for combination in "${COMBINATIONS[@]}"; do
              # Trim whitespace
              combination=$(echo "$combination" | xargs)
              
              case "$combination" in
                "R$") ARGS="$ARGS --filter-r-low" ;;
                "R$$") ARGS="$ARGS --filter-r-med" ;;
                "R$$$") ARGS="$ARGS --filter-r-high" ;;
                "CO$$") ARGS="$ARGS --filter-co-med" ;;
                "CO$$$") ARGS="$ARGS --filter-co-high" ;;
                "CS$") ARGS="$ARGS --filter-cs-low" ;;
                "CS$$") ARGS="$ARGS --filter-cs-med" ;;
                "CS$$$") ARGS="$ARGS --filter-cs-high" ;;
                "I-d") ARGS="$ARGS --filter-i-dirty" ;;
                "I-m") ARGS="$ARGS --filter-i-manufacturing" ;;
                "I-ht") ARGS="$ARGS --filter-i-high-tech" ;;
                "I-r") ARGS="$ARGS --filter-i-resource" ;;
              esac
            done
            
            # Add datpack option if enabled
            [ "$ENABLE_DATPACK" = "true" ] && ARGS="$ARGS --datpack --datpack-output maxis_blockers_specific.dat"
            
            echo "Running with specific zone/wealth filters: $ARGS"
            python3 scripts/create_patches_from_json.py $ARGS
          else
            ARGS=""
            [ "$ENABLE_DATPACK" = "true" ] && ARGS="$ARGS --datpack --datpack-output maxis_blockers_all.dat"
            
            echo "Running with all zone/wealth combinations (no filters)"
            python3 scripts/create_patches_from_json.py $ARGS
          fi
      
      - name: Check for generated files
        id: check_files
        env:
          ENABLE_DATPACK: ${{ github.event.inputs.enable_datpack }}
        run: |
          if [ -z "$(ls -A output_patches 2>/dev/null)" ]; then
            echo "No patch files were generated."
            echo "patches_exist=false" >> $GITHUB_OUTPUT
          else
            echo "Patch files generated successfully."
            echo "patches_exist=true" >> $GITHUB_OUTPUT
            
            # Check if datpack was enabled and set output accordingly
            if [ "$ENABLE_DATPACK" = "true" ]; then
              echo "datpack_enabled=true" >> $GITHUB_OUTPUT
              if ls output_patches/*.dat | grep -q "maxis_blockers"; then
                echo "Datpacked file found in output_patches/"
              fi
            else
              echo "datpack_enabled=false" >> $GITHUB_OUTPUT
            fi
            
            # List generated files for debugging
            echo "Generated files:"
            ls -la output_patches/
          fi
      - name: Upload .dat files artifact
        if: steps.check_files.outputs.patches_exist == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: maxis-blocker-${{ github.event.inputs.selection_mode == 'specific' && 'specific-selection' || 'all-combinations' }}${{ github.event.inputs.enable_datpack == 'true' && '-datpacked' || '-individual' }}
          path: output_patches/
